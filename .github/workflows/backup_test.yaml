name: Test Database Backup Script

on:
  push:
    branches:
      - main

jobs:
  backup:
    runs-on: ubuntu-latest

    env:
      OUTPUT_DIRECTORY: /OMERO/backup/database
      DATABASE: omero_database
      DATABASE_ADMIN: postgres
      CONTAINER_NAME: postgres_container
      DATE: $(date '+%Y-%m-%d')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql postgresql-contrib

      - name: Start PostgreSQL service
        run: sudo service postgresql start
    
      - name: Create Database if it does not exist
        run: |
            DB_EXISTS=$(sudo -u postgres psql -tAc "SELECT 1 FROM pg_database WHERE datname='$DATABASE'")
            if [ "$DB_EXISTS" != "1" ]; then
            sudo -u postgres psql -c "CREATE DATABASE $DATABASE;"
            fi

      - name: Set up user if it does not exist
        run: |
          sudo -u postgres psql -c "DO $$ BEGIN IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = '$DATABASE_ADMIN') THEN CREATE ROLE $DATABASE_ADMIN WITH SUPERUSER; END IF; END $$;"


      - name: Run backup script in normal mode
        run: |
          mkdir -p $OUTPUT_DIRECTORY
          chown -R $DATABASE_ADMIN $OUTPUT_DIRECTORY
          chmod +x ./scripts/database_backup.sh
          ./scripts/database_backup.sh
        env:
          OUTPUT_DIRECTORY: ${{ env.OUTPUT_DIRECTORY }}
          DATABASE: ${{ env.DATABASE }}
          DATABASE_ADMIN: ${{ env.DATABASE_ADMIN }}
          DATE: ${{ env.DATE }}

      - name: Install Docker
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker container for PostgreSQL
        run: |
          docker run -d --name $CONTAINER_NAME -e POSTGRES_DB=$DATABASE -e POSTGRES_USER=$DATABASE_ADMIN -e POSTGRES_PASSWORD=password -p 5432:5432 postgres:latest
          sleep 20 # Wait for the container to be ready

      - name: Run backup script in Docker mode
        run: ./scripts/database_backup.sh docker
        env:
          OUTPUT_DIRECTORY: ${{ env.OUTPUT_DIRECTORY }}
          DATABASE: ${{ env.DATABASE }}
          DATABASE_ADMIN: ${{ env.DATABASE_ADMIN }}
          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
          DATE: ${{ env.DATE }}

      - name: Clean up Docker container
        run: docker stop $CONTAINER_NAME && docker rm $CONTAINER_NAME

      - name: Verify backup files exist
        run: ls $OUTPUT_DIRECTORY

      - name: Clean up backup files
        run: rm -rf $OUTPUT_DIRECTORY
